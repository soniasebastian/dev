********* Terraform Update *****************

1. Terraform 0.13 and later:

Use:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}
 
# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
  # VERSION IS NOT NEEDED HERE
}
Instead of:

provider "aws" {
  version = "~> 3.0"
  region  = "us-east-1"
}

2. Updated code for recent Terraform versions


resource "aws_s3_bucket" "my_s3_bucket" {
    bucket = "my-s3-bucket-in28minutes-rangak-002"
 #   versioning {
 #       enabled = true
 #   }
}
 
resource "aws_s3_bucket_versioning" "versioning_example" {
  bucket = aws_s3_bucket.my_s3_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

3. terraform apply -target=aws_iam_user.my_iam_user



This command needs to change based on recent updates. You need to use double quotes (target="aws_iam_user.my_iam_user") around target!

terraform apply -target="aws_iam_user.my_iam_user"


4. Updated code for recent Terraform versions


CHANGE 1

# data "aws_subnet_ids" "default_subnets" {
#   vpc_id = aws_default_vpc.default.id
# }
 
data "aws_subnets" "default_subnets" {
  filter {
    name   = "vpc-id"
    values = [aws_default_vpc.default.id]
  }
}


5. AMI for EC2 instances
If you are having problems with AMIs, try these filters:



filter {
name = "name"
values = ["amzn2-ami-kernel-5.10-hvm*"]
}
 
filter {
name = "architecture"
values = ["x86_64"]
}

6. Terraform Update: Getting All Subnet Ids
Updated code for recent Terraform versions

# for_each  = data.aws_subnet_ids.default_subnets.ids
for_each  = toset(data.aws_subnets.default_subnets.ids)

7. Terraform Update: Versioning and Encryption
Updated code for recent Terraform versions:


resource "aws_s3_bucket" "enterprise_backend_state" {
    bucket = "dev-applications-backend-state-in28minutes-abc"
 
    lifecycle {
        prevent_destroy = true
    }
 
#    versioning {
#        enabled = true
#    }
#
#    server_side_encryption_configuration {
#        rule {
#            apply_server_side_encryption_by_default {
#                sse_algorithm = "AES256"
#            }
#        }
#    }
 
}
 
resource "aws_s3_bucket_versioning" "versioning_example" {
  bucket = aws_s3_bucket.enterprise_backend_state.id
  versioning_configuration {
    status = "Enabled"
  }
}
 
resource "aws_s3_bucket_server_side_encryption_configuration" "example" {
  bucket = aws_s3_bucket.enterprise_backend_state.bucket
 
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = "AES256"
    }
  }
}
